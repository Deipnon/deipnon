type Restaurant 
  @model
  @auth(rules: [
    {allow: groups, groups: ["Managers"], operations: [create, read, update]},
    {allow: groups, groups: ["Employees"], operations: [read]}
  ])
{
  id: ID!
  name: String!
  phone: AWSPhone
  email: AWSEmail
  hasEatInOption: Boolean
  hasPickupOption: Boolean
  hasDeliveryOption: Boolean 
  zipCode: String
  addressLine: String
  city: String
  state: String
  lat: Float
  lng: Float
}

type Geolocation {
	lat: Float
	lng: Float
}

input GeolocationRequest {
	addressLine: String!
	zipCode: String!
	city: String!
	state: String!
}

type ImageSearch {
  description: String,
  raw: String,
  full: String,
  regular: String,
  small: String,
  thumb: String
}

input ImageSearchRequest {
  searchKey: String!
}

type Query {
	getGeolocation(request: GeolocationRequest): Geolocation
  searchImage(request: ImageSearchRequest): [ImageSearch]
}

enum WorkingHourTypes {
  BussinessHours
  CarryoutHours
  DeliveryHours
}

type WorkHour
  @model
  @auth(rules: [
    {allow: groups, groups: ["Managers"], operations: [create, read, update]},
    {allow: groups, groups: ["Employees"], operations: [read]}
  ])
  @key(name: "byRestaurant", fields: ["restaurantId"])
{
  id: ID!
  restaurantId: ID!
  type: String!
  dayOfWeek: Int!
  day: String!
  startAt: AWSTime!
  endAt: AWSTime!
}


type ProductCategory 
  @model
  @auth(rules: [
    {allow: groups, groups: ["Managers"], operations: [create, read, update]},
    {allow: groups, groups: ["Employees"], operations: [read]}
  ])
  @key(name: "byRestaurant", fields: ["restaurantId"])
{
  id: ID!
  restaurantId: ID!
  name: String!
  description: String
  image: ImageSearch
  isActive: Boolean!
  sortOrder: Int!
}